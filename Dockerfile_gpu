FROM nvidia/cuda:9.2-cudnn7-runtime-ubuntu18.04

MAINTAINER Sakakibara Akiyuki <moritarizumu@gmail.com>

ENV DEBIAN_FRONTEND=noninteractive

ARG OPENCV_VERSION="3.4.2"
ARG PYTHON_VERSION="3.6"


### package needed
RUN apt-get update \
&&  apt-get install -y git pkg-config wget unzip fish \
                       vim language-pack-ja-base \
                       fonts-powerline 
### python install
RUN apt-get update && apt-get install -y python${PYTHON_VERSION}-dev\
                       python3-pip \
                       python3-setuptools \
                       libatlas-base-dev \
&&  python3 -m pip install --upgrade pip 
WORKDIR /workspace
### for build opencv 
RUN pip3 install numpy scipy
RUN apt-get update \
&&  apt-get install -y cmake build-essential libgtk2.0-dev libeigen3-dev \
                       libavcodec-dev libavformat-dev libswscale-dev \
                       libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
                       libdc1394-22-dev libeigen3-dev libtbb-dev \
                       libopenblas-dev liblapack-dev ffmpeg\
 		       vtk6 tcl-vtk6 python-vtk6 libvtk6-dev
# cal env
## install opencv without CUDA
WORKDIR /root

RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
&&  unzip -qq ${OPENCV_VERSION}.zip \
&&  rm ${OPENCV_VERSION}.zip \
&&  wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \
&&  unzip -qq ${OPENCV_VERSION}.zip \
&&  rm ${OPENCV_VERSION}.zip \
&&  mkdir opencv-${OPENCV_VERSION}/cmake_binary \
&&  cd opencv-${OPENCV_VERSION}/cmake_binary \
&&  cmake \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules \
      -D BUILD_EXAMPLES=ON \
      -D BUILD_NEW_PYTHON_SUPPORT=ON \
      -D BUILD_opencv_python3=ON \
      -D BUILD_opencv_python2=OFF \
      -D ENABLE_FAST_MATH=1 \
      -D WITH_V4L=ON \
      -D WITH_FFMPEG=ON \
      -D WITH_TBB=ON \
      -D WITH_OPENCL=ON \
      -D WITH_MATLAB=OFF \
      -D WITH_JAVA=OFF \
      -D WITH_CUDA=OFF \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
      -D PYTHON3_INCLUDE_DIR=/usr/include/python${PYTHON_VERSION}m \
      -D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython${PYTHON_VERSION}m \
      -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python${PYTHON_VERSION}/dist-packages/numpy/core/include \
      -D PYTHON3_PACKAGES_PATH=/usr/local/lib/python${PYTHON_VERSION}/dist-packages \
      -D PY_PIP=/usr/local/lib/python${PYTHON_VERSION}/dist-packages/pip \
      .. \
&&  make -j$(nproc) \
&&  make install \
&&  cp lib/python3/cv2.* /usr/local/lib/python${PYTHON_VERSION}/dist-packages/ \
&&  cd /root \
&&  rm -rf opencv*
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

## install boost
RUN wget -O - 'https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.gz' | tar zxvf - \
&&  cd boost* \
&&  ./bootstrap.sh --with-libraries=python --with-python=python3 \
&&  ./b2 install -j$(nproc) \
&&  cd .. \
&&  rm -r boost*

## install dlib
ARG DLIB_VERSION="v19.6"
RUN wget https://github.com/davisking/dlib/archive/${DLIB_VERSION}.zip \
&&  unzip ${DLIB_VERSION}.zip \
&&  rm ${DLIB_VERSION}.zip \
&&  cd dlib* \
&&  python3 setup.py install \
&&  cd .. \
&&  rm -r dlib*


## install juila lang
WORKDIR /root
RUN wget -O - 'https://julialang-s3.julialang.org/bin/linux/x64/1.0/julia-1.0.1-linux-x86_64.tar.gz' | tar zxf - \
&&  cd julia* \
&&  rm LICENSE.md \
&&  cp -r * /usr/local/ \
&&  cd .. && rm -rf julia*


## install python packages
RUN pip3 install numpy scipy scikit-learn pandas xlrd pypdf2 h5py keras \
                 PyWavelets pydicom matplotlib tensorflow-gpu pylint ipython \
                 jupyter jupyterlab torch torchvision PyMaxflow edward 

# user settings

## make user
ARG USER_NAME='hoge'
ARG UID='1000'
ARG PASSWD='password'
RUN apt-get update \
&&  apt-get install -y sudo \
&&  echo ${USER_NAME}' ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
&&  useradd -u ${UID} -G sudo -p `perl -e "print(crypt('${PASSWD}', 'wN'));"` ${USER_NAME} \
&&  mkdir /home/${USER_NAME} \
&&  chown -R ${USER_NAME}:${USER_NAME} /home/${USER_NAME}

USER ${USER_NAME}
WORKDIR /home/${USER_NAME}


## set jupyter notebook
ADD jupyter-init-setting-python3.py /opt/scripts/bin/
ADD run_jupyter.sh /opt/scripts/bin/
RUN sudo -H pip3 install ipython jupyter jupyterlab \
&&  sudo jupyter serverextension enable --py jupyterlab --sys-prefix \
&&  sudo python3 -m IPython kernelspec install-self \
&&  sudo chmod +x /opt/scripts/bin/run_jupyter.sh \
&&  sudo chmod +x /opt/scripts/bin/jupyter-init-setting-python3.py \
&&  jupyter notebook --generate-config \
## set matplotlib backend
&&  mkdir -p ~/.config/matplotlib \
&&  echo 'backend : Qt4Agg' >> $HOME/.config/matplotlib/matplotlibrc
COPY custom.css ~/.jupyter/custom/
ENV PATH $PATH:/opt/scripts/bin

## install fish shell and arounds
###  add config file
RUN mkdir -p ~/.config/fish
ADD config.fish /home/${USER_NAME}/.config/fish/
ADD fish_config.sh /home/${USER_NAME}/
ADD peco_select_history.fish /home/${USER_NAME}/.config/fish/functions/
### install fish shell
RUN sudo apt-get update && sudo apt-get install -y curl \
&&  sudo chown -R ${USER_NAME}:${USER_NAME} /home/${USER_NAME} \
&&  sudo chmod +x fish_config.sh \
### install fisherman
&&  curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher \
&&  sudo chmod +x fish_config.sh \
&&  ./fish_config.sh \
&&  rm fish_config.sh \
### install peco
&&  wget -O - 'https://github.com/peco/peco/releases/download/v0.5.3/peco_linux_amd64.tar.gz' | tar zxvf - \
&&  sudo mv peco_linux_amd64/peco /usr/local/bin/ \
&&  rm -rf peco_linux_amd64 \
### set fish shell as a default
&&  sudo chsh -s /usr/bin/fish \
&&  sudo chsh -s /usr/bin/fish ${USER_NAME}
ENV LC_CTYPE='ja_JP.UTF-8'


# # change UID and GID
# USER root
# ARG GROUP_NAME=dockeruser
# ARG UID=1000
# ARG GID=1000
# ARG USER_NAME=god
# RUN if [ ${UID} = 1000 ]; then \
#   echo UID is $UID ; \
#   sudo usermod -l $USER_NAME hoge ; \
#     else \
#   usermod -u ${UID} ${USER_NAME} ; \
#   echo change UID: UID is $UID ; \
# fi \
# && if [ ${GID} = 1000 ]; then \
#   echo GID is $GID ; \
#   export GROUP_NAME=$USER_NAME ; \
#     else \
#   groupadd -g ${GID} $GROUP_NAME ; \
#   echo change GID: GID is $GID ; \
# fi \
# &&  mv /home/hoge /home/$USER_NAME \
# &&  chown -R ${USER_NAME}:${GROUP_NAME} /home/${USER_NAME}
  
## install python packages
ADD python-requirements-additional.txt /home/${USER_NAME}/
RUN pip3 install -r python-requirements-additional.txt

USER ${USER_NAME}
WORKDIR /workspace
RUN sudo chown -R $USER_NAME:$GROUP_NAME /workspace
CMD run_jupyter.sh
